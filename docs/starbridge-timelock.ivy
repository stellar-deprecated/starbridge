#lang ivy1.7

# Model of Starbridge; timelock version.

# In this model we consider a single transfer and a single bridge validator
# (referred to as the bridge). For simplicity we do not model addresses,
# amounts, hashes, etc.

# Instead we focus on the core ideas:
# a) the refund timelock and
# b) the idea of using the successor of the current sequence number of the
# receiving account as the sequence number of a withdrawal transaction.

# Include the order module from standard Ivy library (ivy/include/1.7/order.ivy):

include order

# Create types `count_t`, `time_t`, and `seqnum_t`, which are both unbounded
# sequences:

instance count_t : unbounded_sequence
instance seqnum_t : unbounded_sequence
instance time_t : unbounded_sequence

# State and actions pertaining to Stellar
# =======================================

# Whether the transfer has been refunded or not:

var refunded:bool

# The duration of the withdraw period (which starts at time 0):

parameter end_withdraw_period:time_t
axiom end_withdraw_period > 0

# The type of withdraw transactions from the bridge to the receiving account:

object withdraw_t = {
    type this = struct {
        max_time : time_t,
        seqnum : seqnum_t
    }
}

# The set of pending transactions:

relation pending(TX:withdraw_t)

# The last ledger close time on Stellar:

var t:time_t

# History of executed transactions (by ledger close time):

relation executed(T:time_t, TX:withdraw_t)

# Current sequence number of the receiving account:

var seqnum:seqnum_t

# History of the sequence number of the receiving account (by ledger close time):

relation seqnums(T:time_t, S:seqnum_t)

after init {
    pending(TX) := false;
    t := 0;
    executed(T,TX) := false;
    seqnum := 0;
    seqnums(T,S) := T=0 & S=0;
    refunded := false;
}

# A withdrawal is valid and can be executed when its sequence number is equal
# to the sequence number of the receiving account and its `max_time` is greater
# or equal to the current time. TODO: it should be sequence number + 1.

relation valid(TX:withdraw_t, T:time_t)
definition valid(TX:withdraw_t, T:time_t) =
    seqnum = withdraw_t.seqnum(TX) & T <= withdraw_t.max_time(TX)

# Execute a new ledger potentially containing a withdraw transaction. Note that
# the sequence number of the receiving account can increase due to other
# transactions.

export action new_ledger(new_t:time_t, s:seqnum_t, include_withdrawal:bool) = {
    require new_t > t;
    require s >= seqnum;
    if include_withdrawal {
        local tx:withdraw_t {
            require pending(tx) & valid(tx, new_t);
            executed(new_t, tx) := true;
            require s > seqnum;
        }
    };
    seqnum := s;
    t := new_t;
    seqnums(t, seqnum) := true;
}

# State and actions pertaining to the bridge
# ==========================================

# The bridge processes Stellar ledgers but may be late. It can also lose its
# state and restart.

# Ledger time as seen by the bridge:

var bridge_ledger: time_t

# Sequence number of the receiving account as seen by the bridge:

var bridge_receiving_seqnum: seqnum_t

after init {
    bridge_ledger := 0;
    bridge_receiving_seqnum := 0;
}

# The brigde processes ledgers up to `l`.

export action process_ledgers(l:time_t) = {
    require l <= t;
    bridge_ledger := l;
    local s:seqnum_t { # the seqnum of the receiving account as of ledger l
        assume seqnums(l, s);
        bridge_receiving_seqnum := s;
    }
}

# The bridge loses its state and restarts:

export action restart = {
    bridge_ledger := 0;
    bridge_receiving_seqnum := 0
}

# The bridge signs a withdraw transaction if:
# a) it has not been executed
# according to the bridge's view of Stellar (so, before or in ledger
# `bridge_ledger`),
# b) `max_time` is before the end of the withdraw period, and
# c) the sequence number of the transaction is equal to the receiving account's
# sequence number. TODO: it should be the sucessor of that.

export action sign_withdraw(tx:withdraw_t) = {
    require T <= bridge_ledger -> ~executed(T, TX);
    require tx.max_time <= end_withdraw_period;
    require tx.seqnum = bridge_receiving_seqnum;
    pending(tx) := true;
}

# The bridge refunds a transaction if we are past the end of the withdraw period (as measure by Stellar ledger time as seen by the bridge) and no withdraw transaction has been executed.

export action refund = {
    require bridge_ledger > end_withdraw_period;
    require T <= bridge_ledger -> ~executed(T, TX);
    refunded := true;
}

# Safety proof
# ============

# Ivy checks that the invariants given are together inductive. This means that:
# a) they hold in the initial state and
# b) if they hold in a state s and we execute an exported action to obtain s',
# then the invariants also hold in s'.
#
# Note that if those two conditions hold then, by induction, the invariants
# hold in every reachable state.

# A withdrawal cannot be both executed and refunded:
# --------------------------------------------------

invariant ~(refunded & exists T, TX. executed(T,TX))

# Supporting invariants:

# no withdrawals are executed after the end of the withdraw period:
invariant executed(T,TX) -> T <= end_withdraw_period
# refunds only happend after the withdraw period:
invariant refunded -> t > end_withdraw_period
# the bridge is always behind or in sync:
invariant bridge_ledger <= t
# all pending withdrawals have a max time lower than `end_withdraw_period`:
invariant pending(TX) -> withdraw_t.max_time(TX) <= end_withdraw_period

# No double withdrawals:
# ----------------------

invariant executed(T1, TX1) & executed(T2, TX2) -> T1 = T2 & TX1 = TX2

# Supporting invariants:

# if a withdraw is executed, then all the others pending withdraws have stale sequence numbers:
invariant executed(T1,TX1) & pending(TX2) & withdraw_t.seqnum(TX1) ~= withdraw_t.seqnum(TX2) -> withdraw_t.seqnum(TX2) < seqnum
# no transaction is executed in the future:
invariant executed(T,TX) -> T <= t
# `seqnum` is the sequence number of the receiving account at the end of the last ledger:
invariant seqnums(t,seqnum)
# A withdrawal can be executed on if it has the same sequence number as the receiving account, executing it increases the sequence number of the receiving account, and account sequence numbers only increase. So we have the following three invariants:
invariant executed(T,TX) & seqnums(T,S) -> withdraw_t.seqnum(TX) < S
invariant executed(T2,TX) & seqnums(T1,S) & T1 < T2 -> S <= withdraw_t.seqnum(TX)
invariant executed(T1,TX) & seqnums(T2,S) & T1 < T2 -> withdraw_t.seqnum(TX) < S
# pending transactions have sequence numbers lower or equal to the current sequence number of the receiving account:
invariant pending(TX) -> withdraw_t.seqnum(TX) <= seqnum
# if a withdraw has been executed with a seqnum that the bridge has seen, then the bridge knows it's executed:
invariant executed(T1,TX1) & withdraw_t.seqnum(TX1) < bridge_receiving_seqnum -> T1 <= bridge_ledger
# the bridge is in sync or late:
invariant bridge_receiving_seqnum <= seqnum
# no seqnum is assigned in the future:
invariant seqnums(T,S) -> T <= t
# sequence numbers only grow:
invariant seqnums(T1,S1) & seqnums(T2,S2) & T1 < T2 -> S1 <= S2
# a ledger determines a seqnum:
invariant seqnums(T,S1) & seqnums(T,S2) -> S1 = S2
